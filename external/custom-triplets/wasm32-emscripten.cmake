set(VCPKG_ENV_PASSTHROUGH EMSDK PATH)

if(NOT DEFINED ENV{EMSDK})
   message(FATAL_ERROR "The EMSDK environment variable must be defined")
endif()

if(NOT EXISTS $ENV{EMSDK}/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake)
   message(FATAL_ERROR "Emscripten.cmake toolchain file not found")
endif()

set(COMMON_FLAGS " -pthread5")
string(APPEND VCPKG_CXX_FLAGS " ${COMMON_FLAGS} ")
string(APPEND VCPKG_CXX_FLAGS_DEBUG " ${COMMON_FLAGS} ")
string(APPEND VCPKG_CXX_FLAGS_RELEASE " ${COMMON_FLAGS} ")
string(APPEND VCPKG_C_FLAGS " ${COMMON_FLAGS} ")
string(APPEND VCPKG_C_FLAGS_DEBUG " ${COMMON_FLAGS} ")
string(APPEND VCPKG_C_FLAGS_RELEASE " ${COMMON_FLAGS} ")

set(VCPKG_TARGET_ARCHITECTURE wasm32)
set(VCPKG_CRT_LINKAGE dynamic)
set(VCPKG_LIBRARY_LINKAGE static)
set(VCPKG_CMAKE_SYSTEM_NAME Emscripten)
set(VCPKG_CHAINLOAD_TOOLCHAIN_FILE $ENV{EMSDK}/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake)


set(CMAKE_C_FLAGS_INIT " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_C_FLAGS_DEBUG_INIT " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_C_FLAGS_RELEASE_INIT " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_INIT " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_DEBUG_INIT " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_RELEASE_INIT " ${COMMON_FLAGS} " CACHE STRING "" FORCE)

set(CMAKE_C_FLAGS " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_C_FLAGS_DEBUG " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_C_FLAGS_RELEASE " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_DEBUG " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_RELEASE " ${COMMON_FLAGS} " CACHE STRING "" FORCE)

set(CMAKE_EXE_LINKER_FLAGS " ${CMAKE_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE)


#include($ENV{EMSDK}/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake)

set(CMAKE_C_FLAGS_INIT " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_C_FLAGS_DEBUG_INIT " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_C_FLAGS_RELEASE_INIT " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_INIT " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_DEBUG_INIT " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_RELEASE_INIT " ${COMMON_FLAGS} " CACHE STRING "" FORCE)

set(CMAKE_C_FLAGS " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_C_FLAGS_DEBUG " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_C_FLAGS_RELEASE " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_DEBUG " ${COMMON_FLAGS} " CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_RELEASE " ${COMMON_FLAGS} " CACHE STRING "" FORCE)

get_property( _CMAKE_IN_TRY_COMPILE GLOBAL PROPERTY IN_TRY_COMPILE )
if(NOT _CMAKE_IN_TRY_COMPILE)
   # string(APPEND CMAKE_C_FLAGS_INIT " ${COMMON_FLAGS} ")
   # string(APPEND CMAKE_C_FLAGS_DEBUG_INIT " ${COMMON_FLAGS} ")
   # string(APPEND CMAKE_C_FLAGS_RELEASE_INIT " ${COMMON_FLAGS} ")
   # string(APPEND CMAKE_CXX_FLAGS_INIT " ${COMMON_FLAGS} ")
   # string(APPEND CMAKE_CXX_FLAGS_DEBUG_INIT " ${COMMON_FLAGS} ")
   # string(APPEND CMAKE_CXX_FLAGS_RELEASE_INIT " ${COMMON_FLAGS} ")

   #  string(APPEND CMAKE_SHARED_LINKER_FLAGS_INIT " ${VCPKG_LINKER_FLAGS} ")
   #  string(APPEND CMAKE_EXE_LINKER_FLAGS_INIT " ${VCPKG_LINKER_FLAGS} ")
   #  if(VCPKG_CRT_LINKAGE STREQUAL "static")
   #      string(APPEND CMAKE_SHARED_LINKER_FLAGS_INIT "-static ")
   #      string(APPEND CMAKE_EXE_LINKER_FLAGS_INIT "-static ")
   #  endif()
   #  string(APPEND CMAKE_SHARED_LINKER_FLAGS_DEBUG_INIT " ${VCPKG_LINKER_FLAGS_DEBUG} ")
   #  string(APPEND CMAKE_EXE_LINKER_FLAGS_DEBUG_INIT " ${VCPKG_LINKER_FLAGS_DEBUG} ")
   #  string(APPEND CMAKE_SHARED_LINKER_FLAGS_RELEASE_INIT " ${VCPKG_LINKER_FLAGS_RELEASE} ")
   #  string(APPEND CMAKE_EXE_LINKER_FLAGS_RELEASE_INIT " ${VCPKG_LINKER_FLAGS_RELEASE} ")
endif()


# string(APPEND CMAKE_CXX_FLAGS " -pthread")
# message("CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")

# string(APPEND VCPKG_CXX_FLAGS " -pthread")
# string(APPEND VCPKG_CXX_FLAGS_DEBUG " -pthread")
# string(APPEND VCPKG_CXX_FLAGS_RELEASE " -pthread")

# string(APPEND VCPKG_C_FLAGS " -pthread")
# string(APPEND VCPKG_C_FLAGS_DEBUG " -pthread")
# string(APPEND VCPKG_C_FLAGS_RELEASE " -pthread")
# message("VCPKG_CXX_FLAGS: ${VCPKG_CXX_FLAGS}")
# message("VCPKG_C_FLAGS: ${VCPKG_C_FLAGS}")

# string(APPEND VCPKG_C_FLAGS " -pthread")



# set(CMAKE_CXX_FLAGS " ${VCPKG_CXX_FLAGS}" CACHE STRING "")
# set(CMAKE_C_FLAGS " ${VCPKG_C_FLAGS}" CACHE STRING "")




# set(CMAKE_CXX_FLAGS_DEBUG "${VCPKG_CXX_FLAGS}" CACHE STRING "")
# set(CMAKE_C_FLAGS_DEBUG "${VCPKG_C_FLAGS}" CACHE STRING "")
# set(CMAKE_CXX_FLAGS_RELEASE "${VCPKG_CXX_FLAGS}" CACHE STRING "")
# set(CMAKE_C_FLAGS_RELEASE "${VCPKG_C_FLAGS}" CACHE STRING "")

